    # sps_type:
    # 0     exact
    # 1     from ... to

    # Message types:
    # 0     No error (status)
    # 1     INFO
    # 2     WARNING
    # 3     ERROR

    #@SerializedName("id")       var id: Int? = -1,
    #@SerializedName("status")   var status : MessageType? = MessageType.STATUS,
    #@SerializedName("time")     var time: Long = 0,
    #@SerializedName("sps")      var sps: Int? = -1,
    #@SerializedName("group")    var group: Int? = -1,
    #@SerializedName("device")   var device: String? = "00",
    #@SerializedName("part")     var part: Int? = -1,
    #@SerializedName("message")  var message: String? = ""


https://github.com/harshnative/pysqlitecipher


async def publish_generator():
    try:
        print("Attempting publish")
        print(f"hostname= {args.mqtt_host} port= {args.mqtt_port} user= {args.mqtt_user} pass={args.mqtt_password}")
        async with aiomqtt.Client(hostname=args.mqtt_host,
                                  client_id="broker_generator",
                                  port=args.mqtt_port,
                                  username=args.mqtt_user,
                                  password=args.mqtt_password,
                                  clean_start=paho.mqtt.client.MQTT_CLEAN_START_FIRST_ONLY,
                                  tls_params=tls_params) as client:

            # Initialize config once
            cfg = Settings("settings.json")

            await client.connect()

            # Generate a few messages to see something on the client
            for i in range(0, random.randint(5, 7)):
                msg = MessageWrapper.randomize(cfg)
                print(f"Initial generation [{i}]: {msg.to_string()}")
                await client.publish("messages/add", qos=1, payload=msg.to_json())
                async with lock:
                    message_list.append(msg)

            # Loop
            while True:
                # Generate random number. If list is empty or picked number large enough, generate message
                if random.randint(0, 100) > 50 or len(message_list) == 0:
                    print("Publishing..")
                    msg = MessageWrapper.randomize(cfg)
                    print(f"Generated message with id [{msg.id}]")
                    # await client.publish("mqtt/test", qos=1, payload=b"Das ist ein Test")
                    await client.publish("messages/add", qos=1, payload=msg.to_json())
                    async with lock:
                        message_list.append(msg)

                # Randomly pick a message and send delete to clients
                else:
                    index = random.randint(0, len(message_list) - 1)
                    async with lock:
                        msg = message_list[index]
                        message_list.remove(msg)
                        print(f"Removing message: {msg.id}. There are {len(message_list)} entries left.")
                    await client.publish("messages/remove", qos=1, payload=msg.to_json())
                await asyncio.sleep(1)
    except Exception as ex:
        print(f"publish(): {ex}")
